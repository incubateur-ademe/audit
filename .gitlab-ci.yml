# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
variables:
  SSH_PRIVATE_KEY_BASE64: "${SCALINGO_SSH_PRIVATE_KEY_BASE64}"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GITLAB_ACCESS_TOKEN: "${GITLAB_ACCESS_TOKEN}"
  GIT_DEPTH: '0'
  GRIST_DOC_ID: 1234
  GRIST_URL: https://test.com
  GRIST_API_KEY: 1234
default:
  image: node:22-alpine
  interruptible: true
stages:
- test
- deploy
lint:
  stage: test
  rules:
  - if: "$CI_COMMIT_TITLE =~ /^chore.release.:.*/"
    when: never
  - if: "$CI_COMMIT_TAG == null"
  script:
  - npm ci
  - npm run lint
test:
  stage: test
  image: node:22-bookworm
  rules:
  - if: "$CI_COMMIT_TITLE =~ /^chore.release.:.*/"
    when: never
  - if: "$CI_COMMIT_TAG == null"
  script:
  - npm ci
  - npm run build
  - npx playwright install --with-deps
  - npm run test-ci
  artifacts:
    paths:
    - coverage/lcov.info
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
sonarcloud-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint:
    - ''
  rules:
  - if: "$CI_COMMIT_TITLE =~ /^chore.release.:.*/"
    when: never
  - if: "$CI_COMMIT_TAG == null"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
    - ".sonar/cache"
  script:
  - sonar-scanner
  needs:
  - job: test
    artifacts: true
deploy-staging:
  image: ilyasemenov/gitlab-ci-git-push
  stage: deploy
  rules:
  - if: "$CI_COMMIT_TITLE =~ /^chore.release.:.*/"
    when: never
  - if: "$CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  script:
  - export SSH_PRIVATE_KEY=`echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d`
  - git-push git@ssh.osc-fr1.scalingo.com:survey-builder-anct-staging.git main
tag-prod:
  stage: deploy
  allow_failure: false
  rules:
  - if: "$CI_COMMIT_TITLE =~ /^chore.release.:.*/"
    when: never
  - if: "$CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    when: manual
  script:
  - apk add --no-cache bash git openssh-client
  - git config user.name "CI Bot"
  - git config user.email "support@incubateur.anct.gouv.fr"
  - git remote add gitlab_origin https://oauth2:$GITLAB_ACCESS_TOKEN@gitlab.com/incubateur-territoires/incubateur/survey-builder.git
  - npm install
  - npm run release
  - git push --follow-tags gitlab_origin HEAD:main
  manual_confirmation: Are you sure you want to deploy to production ?
  environment:
    name: production
release_job:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
  - if: "$CI_COMMIT_TAG"
  script:
  - echo "Running the release job."
  release:
    tag_name: "$CI_COMMIT_TAG"
    name: Release $CI_COMMIT_TAG
    description: Release created using the release-cli.
deploy-prod:
  image: ilyasemenov/gitlab-ci-git-push
  stage: deploy
  interruptible: false
  rules:
  - if: "$CI_COMMIT_TAG"
  script:
  - export SSH_PRIVATE_KEY=`echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d`
  - git-push git@ssh.osc-secnum-fr1.scalingo.com:survey-builder-anct-prod.git main
include:
- template: Security/SAST.gitlab-ci.yml
  rules:
  - if: "$CI_COMMIT_TITLE =~ /^chore.release.:.*/"
    when: never
  - when: always
- template: Security/Dependency-Scanning.gitlab-ci.yml
